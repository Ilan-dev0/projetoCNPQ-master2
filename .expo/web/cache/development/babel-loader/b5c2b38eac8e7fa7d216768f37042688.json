{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { COLORS, SIZES } from \"../constants\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { Modalize } from 'react-native-modalize';\nimport { isNamespaceExport } from 'typescript';\n\nvar Quiz = function Quiz(props) {\n  var _allQuestions$current3;\n\n  var QuizCounty = props.QuizCounty,\n      Questions = props.Questions,\n      BackToHome = props.BackToHome,\n      Language = props.Language;\n  var allQuestions = Questions;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentQuestionIndex = _useState2[0],\n      setCurrentQuestionIndex = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentOptionSelected = _useState4[0],\n      setCurrentOptionSelected = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      correctOption = _useState6[0],\n      setCorrectOption = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isOptionsDisabled = _useState8[0],\n      setIsOptionsDisabled = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      score = _useState10[0],\n      setScore = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      showNextButton = _useState12[0],\n      setShowNextButton = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      showScoreModal = _useState14[0],\n      setShowScoreModal = _useState14[1];\n\n  var shuffleArray = function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  var shuffledCards = React.useMemo(function () {\n    return shuffleArray(allQuestions);\n  }, []);\n\n  var validateAnswer = function validateAnswer(selectedOption) {\n    var correct_option = allQuestions[currentQuestionIndex]['correct_option'];\n    setCurrentOptionSelected(selectedOption);\n    setCorrectOption(correct_option);\n    setIsOptionsDisabled(true);\n\n    if (selectedOption == correct_option) {\n      setScore(score + 1);\n    }\n\n    setShowNextButton(true);\n  };\n\n  var handleNext = function handleNext() {\n    if (currentQuestionIndex == allQuestions.length - 36) {\n      setShowScoreModal(true);\n    } else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setCurrentOptionSelected(null);\n      setCorrectOption(null);\n      setIsOptionsDisabled(false);\n      setShowNextButton(false);\n    }\n\n    Animated.timing(progress, {\n      toValue: currentQuestionIndex + 1,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n\n  var restartQuiz = function restartQuiz() {\n    setShowScoreModal(false);\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setCurrentOptionSelected(null);\n    setCorrectOption(null);\n    setIsOptionsDisabled(false);\n    setShowNextButton(false);\n    Animated.timing(progress, {\n      toValue: 0,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n\n  var renderQuestion = function renderQuestion() {\n    var _allQuestions$current;\n\n    return React.createElement(View, {\n      style: {\n        marginVertical: 25\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row',\n        alignItems: 'flex-end'\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: COLORS.white,\n        fontSize: 20,\n        opacity: 0.6,\n        marginRight: 2\n      }\n    }, currentQuestionIndex + 1), React.createElement(Text, {\n      style: {\n        color: COLORS.white,\n        fontSize: 18,\n        opacity: 0.6\n      }\n    }, \"/ \", allQuestions.length - 35)), React.createElement(Text, {\n      style: {\n        color: COLORS.white,\n        fontSize: 20\n      }\n    }, (_allQuestions$current = allQuestions[currentQuestionIndex]) == null ? void 0 : _allQuestions$current.question));\n  };\n\n  var renderOptions = function renderOptions() {\n    var _allQuestions$current2;\n\n    return React.createElement(View, {\n      style: [styles.wrap2]\n    }, React.createElement(View, {\n      style: [styles.container]\n    }, React.createElement(TouchableOpacity, {\n      onPress: onOpen,\n      style: {\n        height: 70,\n        width: 70\n      }\n    }, React.createElement(Image, {\n      style: {\n        height: 70,\n        width: 70,\n        position: 'relative',\n        bottom: 4\n      },\n      source: require(\"../assets/images/Icone-Dica.png\")\n    }))), React.createElement(View, null, (_allQuestions$current2 = allQuestions[currentQuestionIndex]) == null ? void 0 : _allQuestions$current2.options.map(function (option) {\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return validateAnswer(option);\n        },\n        disabled: isOptionsDisabled,\n        key: option,\n        style: {\n          borderWidth: 3,\n          borderColor: option == correctOption ? COLORS.success : option == currentOptionSelected ? COLORS.error : QuizCounty == 'EQ' ? '#595a94' : '#595a94',\n          backgroundColor: option == correctOption ? COLORS.success + '20' : option == currentOptionSelected ? COLORS.error + '20' : QuizCounty == 'EQ' ? '#595a94' : '#595a94',\n          height: 54,\n          borderRadius: 40,\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          paddingHorizontal: 20,\n          marginVertical: 5\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          color: COLORS.white\n        }\n      }, option), option == correctOption ? React.createElement(View, {\n        style: {\n          width: 30,\n          height: 30,\n          borderRadius: 30 / 2,\n          backgroundColor: COLORS.success,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }\n      }, React.createElement(MaterialCommunityIcons, {\n        name: \"check\",\n        style: {\n          color: COLORS.white,\n          fontSize: 20\n        }\n      })) : option == currentOptionSelected ? React.createElement(View, {\n        style: {\n          width: 30,\n          height: 30,\n          borderRadius: 30 / 2,\n          backgroundColor: COLORS.error,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }\n      }, React.createElement(MaterialCommunityIcons, {\n        name: \"close\",\n        style: {\n          color: COLORS.white,\n          fontSize: 20\n        }\n      })) : null);\n    })));\n  };\n\n  var renderNextButton = function renderNextButton() {\n    if (showNextButton) {\n      return React.createElement(TouchableOpacity, {\n        onPress: handleNext,\n        style: {\n          alignSelf: 'center',\n          marginTop: 20,\n          width: '100%',\n          backgroundColor: '#FFD200',\n          padding: 10,\n          borderRadius: 30\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          color: COLORS.black,\n          textAlign: 'center'\n        }\n      }, \"Pr\\xF3ximo\"));\n    } else {\n      return null;\n    }\n  };\n\n  var _useState15 = useState(new Animated.Value(0)),\n      _useState16 = _slicedToArray(_useState15, 2),\n      progress = _useState16[0],\n      setProgress = _useState16[1];\n\n  var progressAnim = progress.interpolate({\n    inputRange: [0, allQuestions.length - 36],\n    outputRange: ['0%', '100%']\n  });\n\n  var renderProgressBar = function renderProgressBar() {\n    return React.createElement(View, {\n      style: {\n        width: '100%',\n        height: 20,\n        borderRadius: 20,\n        backgroundColor: '#00000020'\n      }\n    }, React.createElement(Animated.View, {\n      style: [{\n        height: 20,\n        borderRadius: 20,\n        backgroundColor: '#FFD200'\n      }, {\n        width: progressAnim\n      }]\n    }));\n  };\n\n  var modalizeRef = useRef(null);\n\n  function onOpen() {\n    var _modalizeRef$current;\n\n    (_modalizeRef$current = modalizeRef.current) == null ? void 0 : _modalizeRef$current.open();\n  }\n\n  return React.createElement(GestureHandlerRootView, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(Modalize, {\n    ref: modalizeRef,\n    snapPoint: 1200,\n    modalHeight: 350\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: '#2D3953',\n      flex: 1,\n      height: 500,\n      flexDirection: 'row',\n      justifyContent: 'center'\n    }\n  }, React.createElement(View, {\n    style: styles.wrap2\n  }, React.createElement(Text, {\n    style: [styles.text1, styles.helloText]\n  }, \"Dica:\"), React.createElement(Text, {\n    style: [styles.text1, styles.moreText]\n  }, (_allQuestions$current3 = allQuestions[currentQuestionIndex]) == null ? void 0 : _allQuestions$current3.Hint)))), React.createElement(StatusBar, {\n    barStyle: \"light-content\",\n    backgroundColor: COLORS.primary\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      paddingVertical: 40,\n      paddingHorizontal: 16,\n      backgroundColor: COLORS.background,\n      position: 'relative'\n    }\n  }, renderProgressBar(), renderQuestion(), renderOptions(), renderNextButton(), React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: showScoreModal\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: COLORS.primary,\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: COLORS.white,\n      width: '90%',\n      borderRadius: 20,\n      padding: 20,\n      alignItems: 'center'\n    }\n  }, Language == 'PT' ? React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      fontWeight: 'bold'\n    }\n  }, score > allQuestions.length - 43 ? 'Parabéns, você concluiu o Quiz!' : 'Oops, você falhou!') : React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      fontWeight: 'bold'\n    }\n  }, score > allQuestions.length - 43 ? 'Felicidades!' : 'Oops!'), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      marginVertical: 20\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      color: score > allQuestions.length - 43 ? COLORS.success : COLORS.error\n    }\n  }, score), React.createElement(Text, {\n    style: {\n      fontSize: 20,\n      color: COLORS.black\n    }\n  }, \"/ \", allQuestions.length - 35)), React.createElement(TouchableOpacity, {\n    onPress: restartQuiz,\n    style: {\n      backgroundColor: COLORS.accent,\n      padding: 20,\n      width: '100%',\n      borderRadius: 20\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      color: COLORS.white,\n      fontSize: 20\n    }\n  }, Language == 'PT' ? 'Tentar novamente' : 'Intentar nuevamente')), React.createElement(TouchableOpacity, {\n    onPress: BackToHome,\n    style: {\n      backgroundColor: COLORS.accent,\n      padding: 20,\n      width: '100%',\n      borderRadius: 20,\n      marginTop: 20\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      color: COLORS.white,\n      fontSize: 20\n    }\n  }, Language == 'PT' ? 'Voltar' : 'Vuelve'))))), React.createElement(View, {\n    style: {\n      backgroundColor: '#8082d6',\n      width: SIZES.width,\n      height: SIZES.height,\n      position: 'absolute',\n      zIndex: -1,\n      bottom: 0,\n      left: 0,\n      right: 0\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    marginBottom: 0\n  },\n  background: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  modalText: {\n    textAlign: \"center\",\n    fontSize: 24\n  },\n  modalButton: {\n    backgroundColor: \"transparent\",\n    borderRadius: 100,\n    borderColor: \"#ffffff\",\n    marginTop: 64,\n    borderWidth: 1,\n    paddingTop: 16,\n    paddingBottom: 16,\n    paddingLeft: 25,\n    paddingRight: 25,\n    marginHorizontal: 5,\n    flex: 1\n  },\n  moreText: {\n    textAlign: \"center\",\n    marginTop: 20,\n    fontSize: 25\n  },\n  helloText: {\n    fontSize: 40,\n    textAlign: \"center\",\n    marginTop: 0\n  },\n  wrap: {\n    height: 60,\n    marginBottom: 10,\n    marginTop: 10,\n    margin: 20,\n    borderRadius: 8,\n    backgroundColor: \"#2D3953\",\n    shadowColor: \"#4048BF\",\n    shadowOffset: {\n      width: 8.4,\n      height: 8.4\n    },\n    shadowOpacity: 0.74,\n    shadowRadius: 30,\n    elevation: 10\n  },\n  wrap2: {\n    padding: 20,\n    borderRadius: 8,\n    backgroundColor: \"#2D3953\"\n  },\n  text1: {\n    fontSize: 28.8,\n    color: \"#ECE0E9\",\n    fontWeight: \"600\"\n  },\n  center: {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  shadowButton: {\n    borderColor: \"blue\",\n    borderWidth: 1,\n    borderRadius: 105,\n    width: 210,\n    height: 80,\n    shadowColor: \"#4048BF\",\n    shadowOffset: {\n      width: 8.4,\n      height: 8.4\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 30,\n    elevation: 10\n  },\n  mainButton: {\n    zIndex: 10,\n    width: 200,\n    height: 70,\n    borderRadius: 100,\n    shadowColor: \"#4048BF\",\n    shadowOffset: {\n      width: 6.4,\n      height: 6.4\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 20,\n    backgroundColor: \"#2D3953\"\n  },\n  container2: {\n    flex: 1,\n    backgroundColor: 'white'\n  },\n  tip: {\n    position: \"relative\",\n    left: 0,\n    right: 0,\n    top: -445,\n    bottom: 0,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  bruh: {\n    paddingBottom: 80\n  }\n});\nexport default Quiz;","map":{"version":3,"sources":["C:/ProjetoCNPQ-master2/app/components/Quiz.js"],"names":["React","useState","useRef","COLORS","SIZES","MaterialCommunityIcons","GestureHandlerRootView","Modalize","isNamespaceExport","Quiz","props","QuizCounty","Questions","BackToHome","Language","allQuestions","currentQuestionIndex","setCurrentQuestionIndex","currentOptionSelected","setCurrentOptionSelected","correctOption","setCorrectOption","isOptionsDisabled","setIsOptionsDisabled","score","setScore","showNextButton","setShowNextButton","showScoreModal","setShowScoreModal","shuffleArray","array","i","length","j","Math","floor","random","temp","shuffledCards","useMemo","validateAnswer","selectedOption","correct_option","handleNext","Animated","timing","progress","toValue","duration","useNativeDriver","start","restartQuiz","renderQuestion","marginVertical","flexDirection","alignItems","color","white","fontSize","opacity","marginRight","question","renderOptions","styles","wrap2","container","onOpen","height","width","position","bottom","require","options","map","option","borderWidth","borderColor","success","error","backgroundColor","borderRadius","justifyContent","paddingHorizontal","renderNextButton","alignSelf","marginTop","padding","black","textAlign","Value","setProgress","progressAnim","interpolate","inputRange","outputRange","renderProgressBar","modalizeRef","current","open","flex","text1","helloText","moreText","Hint","primary","paddingVertical","background","fontWeight","accent","zIndex","left","right","StyleSheet","create","marginBottom","top","modalText","modalButton","paddingTop","paddingBottom","paddingLeft","paddingRight","marginHorizontal","wrap","margin","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","center","shadowButton","mainButton","container2","tip","bruh"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport { View, Text, SafeAreaView, StatusBar, Image, TouchableOpacity, Modal, Animated, ImageBackground, StyleSheet, Dimensions } from 'react-native'\nimport { COLORS, SIZES } from '../constants';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { Modalize } from 'react-native-modalize';\nimport { isNamespaceExport } from 'typescript';\n\n\n\nconst Quiz = (props) => {\n    const {QuizCounty, Questions, BackToHome, Language} = props;\n    const allQuestions = Questions;\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n    const [currentOptionSelected, setCurrentOptionSelected] = useState(null);\n    const [correctOption, setCorrectOption] = useState(null);\n    const [isOptionsDisabled, setIsOptionsDisabled] = useState(false);\n    const [score, setScore] = useState(0)\n    const [showNextButton, setShowNextButton] = useState(false)\n    const [showScoreModal, setShowScoreModal] = useState(false)\n    \n    const shuffleArray = array => {\n        for(let i = array.length - 1; i > 0; i--){\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n    const shuffledCards = React.useMemo(() => {\n          \n        return shuffleArray(allQuestions);\n      }, [])\n      \n      \n    \n\n    const validateAnswer = (selectedOption) => {\n        let correct_option = allQuestions[currentQuestionIndex]['correct_option'];\n        setCurrentOptionSelected(selectedOption);\n        setCorrectOption(correct_option);\n        setIsOptionsDisabled(true);\n        if(selectedOption==correct_option){\n            // Set Score\n            setScore(score+1)\n        }\n        // Mostrar botão Próximo\n        setShowNextButton(true)\n    }\n    const handleNext = () => {\n        if(currentQuestionIndex== allQuestions.length-36){\n            // Ultima questão\n            // Mostrar Score Modal\n            setShowScoreModal(true)\n        }else{\n            setCurrentQuestionIndex(currentQuestionIndex+1);\n            setCurrentOptionSelected(null);\n            setCorrectOption(null);\n            setIsOptionsDisabled(false);\n            setShowNextButton(false);\n        }\n        Animated.timing(progress, {\n            toValue: currentQuestionIndex+1,\n            duration: 1000,\n            useNativeDriver: false\n        }).start();\n    }\n    const restartQuiz = () => {\n\n        setShowScoreModal(false);\n        setCurrentQuestionIndex(0);\n        setScore(0);\n        setCurrentOptionSelected(null);\n        setCorrectOption(null);\n        setIsOptionsDisabled(false);\n        setShowNextButton(false);\n        Animated.timing(progress, {\n            toValue: 0,\n            duration: 1000,\n            useNativeDriver: false\n        }).start();\n    }\n    const renderQuestion = () => {\n        return (\n            <View style={{\n                marginVertical: 25\n            }}>\n                {/* Contador de perguntas */}\n                <View style={{\n                    flexDirection: 'row',\n                    alignItems: 'flex-end'\n                }}>\n                    <Text style={{color: COLORS.white, fontSize: 20, opacity: 0.6, marginRight: 2}}>{currentQuestionIndex+1}</Text>\n                    <Text style={{color: COLORS.white, fontSize: 18, opacity: 0.6}}>/ {allQuestions.length-35}</Text>\n                </View>\n\n                {/* Question */}\n                <Text style={{\n                    color: COLORS.white,\n                    fontSize: 20\n                }}>{allQuestions[currentQuestionIndex]?.question}</Text>\n            </View>\n        )\n    }\n    const renderOptions = () => {\n        return (\n            <View style={[styles.wrap2]}>\n\n<View style={[styles.container]}>\n                   <TouchableOpacity onPress={onOpen} style={{height:70, width: 70}}>\n                <Image style={{height:70, width: 70, position: 'relative', bottom: 4}} source={require('../assets/images/Icone-Dica.png')} />\n                    </TouchableOpacity>\n\n\n               </View>\n\n            <View>\n                {\n                    allQuestions[currentQuestionIndex]?.options.map(option => (\n                        <TouchableOpacity \n                        onPress={()=> validateAnswer(option)}\n                        disabled={isOptionsDisabled}\n                        key={option}\n                        style={{\n                            borderWidth: 3, \n                            borderColor: option==correctOption \n                            ? COLORS.success\n                            : option==currentOptionSelected \n                            ? COLORS.error \n                            : QuizCounty=='EQ' \n                            ?'#595a94'\n                            :'#595a94',\n                            backgroundColor: option==correctOption \n                            ? COLORS.success +'20'\n                            : option==currentOptionSelected \n                            ? COLORS.error +'20'\n                            : QuizCounty=='EQ'\n                            ?'#595a94'\n                            :'#595a94',\n                            height: 54, borderRadius: 40,\n                            flexDirection: 'row',\n                            alignItems: 'center', justifyContent: 'space-between',\n                            paddingHorizontal: 20,\n                            marginVertical: 5\n                        }}\n                        >\n                            <Text style={{fontSize: 20, color: COLORS.white}}>{option}</Text>\n\n                            {/* Show Check Or Cross Icon based on correct answer*/}\n                            {\n                                option==correctOption ? (\n                                    <View style={{\n                                        width: 30, height: 30, borderRadius: 30/2,\n                                        backgroundColor: COLORS.success,\n                                        justifyContent: 'center', alignItems: 'center'\n                                    }}>\n                                        <MaterialCommunityIcons name=\"check\" style={{\n                                            color: COLORS.white,\n                                            fontSize: 20\n                                        }} />\n                                    </View>\n                                ): option == currentOptionSelected ? (\n                                    <View style={{\n                                        width: 30, height: 30, borderRadius: 30/2,\n                                        backgroundColor: COLORS.error,\n                                        justifyContent: 'center', alignItems: 'center'\n                                    }}>\n                                        <MaterialCommunityIcons name=\"close\" style={{\n                                            color: COLORS.white,\n                                            fontSize: 20\n                                        }} />\n                                    </View>\n                                ) : null\n                            }\n\n                        </TouchableOpacity>\n                    ))\n                }\n            </View>\n            </View>\n        )\n    }\n    const renderNextButton = () => {\n        if(showNextButton){\n            return (\n                <TouchableOpacity\n                onPress={handleNext}\n                style={{\n                   alignSelf: 'center', marginTop: 20, width: '100%', backgroundColor: '#FFD200', padding: 10, borderRadius: 30\n                }}>\n                    <Text style={{fontSize: 20, color: COLORS.black, textAlign: 'center'}}>Próximo</Text>\n                </TouchableOpacity>\n            )\n        }else{\n            return null\n        }\n    }\n    const [progress, setProgress] = useState(new Animated.Value(0));\n    const progressAnim = progress.interpolate({\n        inputRange: [0, allQuestions.length-36],\n        outputRange: ['0%','100%']\n    })\n    const renderProgressBar = () => {\n        return (\n            <View style={{\n                width: '100%',\n                height: 20,\n                borderRadius: 20,\n                backgroundColor: '#00000020',\n\n            }}>\n                <Animated.View style={[{\n                    height: 20,\n                    borderRadius: 20,\n                    backgroundColor: '#FFD200'\n                },{\n                    width: progressAnim\n                }]}>\n\n                </Animated.View>\n\n\n            </View>\n        )\n        \n\n        \n    }\n\n    const modalizeRef = useRef(null);\n\n    function onOpen(){\n        modalizeRef.current?.open();\n\n    }\n    \n    \n\n    return (\n    \n       <GestureHandlerRootView style={{\n           flex: 1\n       }}>\n\n\n            \n            <Modalize\n                ref={modalizeRef}\n                snapPoint={1200}\n                modalHeight={350}\n            >\n                <View\n                 style={{\n                    backgroundColor: '#2D3953' ,\n                    flex:1,\n                    height: 500,\n                    flexDirection: 'row',\n                    justifyContent: 'center'\n                 }}\n                >\n                    <View style={styles.wrap2}>\n                        <Text style={[styles.text1, styles.helloText]}>Dica:</Text>\n                        <Text style={[styles.text1, styles.moreText]}>{allQuestions[currentQuestionIndex]?.Hint}</Text>\n                    </View>\n                </View>\n               \n            </Modalize>\n           <StatusBar barStyle=\"light-content\" backgroundColor={COLORS.primary} />\n           <View style={{\n               flex: 1,\n               paddingVertical: 40,\n               paddingHorizontal: 16,\n               backgroundColor: COLORS.background,\n               position:'relative'\n           }}>\n\n               {/* ProgressBar */}\n               { renderProgressBar() }\n            \n               {/* Question */}\n               {renderQuestion()}\n\n               {/* Tip Button */} \n               \n               \n               \n               \n               {/* Options */}\n               {renderOptions()}\n\n\n               {/* Next Button */}\n               {renderNextButton()}\n\n               {/* Score Modal */}\n               <Modal\n               animationType=\"slide\"\n               transparent={true}\n               visible={showScoreModal}\n               >\n                   <View style={{\n                       flex: 1,\n                       backgroundColor: COLORS.primary,\n                       alignItems: 'center',\n                       justifyContent: 'center'\n                   }}>\n                       <View style={{\n                           backgroundColor: COLORS.white,\n                           width: '90%',\n                           borderRadius: 20,\n                           padding: 20,\n                           alignItems: 'center'\n                       }}>\n                           {Language=='PT'\n                            ?<Text style={{fontSize: 30, fontWeight: 'bold'}}>{ score> (allQuestions.length-43) ? 'Parabéns, você concluiu o Quiz!' : 'Oops, você falhou!' }</Text>\n                            : <Text style={{fontSize: 30, fontWeight: 'bold'}}>{ score> (allQuestions.length-43) ? 'Felicidades!' : 'Oops!' }</Text>\n                           }\n\n                           <View style={{\n                               flexDirection: 'row',\n                               justifyContent: 'flex-start',\n                               alignItems: 'center',\n                               marginVertical: 20\n                           }}>\n                               <Text style={{\n                                   fontSize: 30,\n                                   color: score> (allQuestions.length-43) ? COLORS.success : COLORS.error\n                               }}>{score}</Text>\n                                <Text style={{\n                                    fontSize: 20, color: COLORS.black\n                                }}>/ { allQuestions.length-35 }</Text>\n                           </View>\n                           {/* Retry Quiz button */}\n                           <TouchableOpacity\n                           onPress={restartQuiz}\n                           style={{\n                               backgroundColor: COLORS.accent,\n                               padding: 20, width: '100%', borderRadius: 20\n                           }}>\n                               <Text style={{\n                                   textAlign: 'center', color: COLORS.white, fontSize: 20\n                               }}>\n                                   {Language=='PT'\n                                   ?'Tentar novamente'\n                                   :'Intentar nuevamente'}\n                               </Text>\n                           </TouchableOpacity>\n                           <TouchableOpacity\n                           onPress={BackToHome}\n                           style={{\n                               backgroundColor: COLORS.accent,\n                               padding: 20, width: '100%', borderRadius: 20, marginTop: 20\n                           }}>\n                               <Text style={{\n                                   textAlign: 'center', color: COLORS.white, fontSize: 20\n                               }}>\n                                   {Language=='PT'\n                                   ?'Voltar'\n                                   :'Vuelve'}\n                               </Text>\n                           </TouchableOpacity>\n\n                       </View>\n\n                   </View>\n               </Modal>\n\n               {/* Background Image*/} \n                \n                 <View style={{\n                    backgroundColor: '#8082d6' ,\n                    width: SIZES.width,\n                    height: SIZES.height,\n                    position: 'absolute',\n                    zIndex: -1,\n                    bottom: 0,\n                    left: 0,\n                    right: 0\n                }}>\n\n                 </View>\n           </View>\n       </GestureHandlerRootView>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        alignItems: 'center',\n        marginBottom: 0\n    },\n    background:{\n        position:\"absolute\",\n        left:0,\n        right:0,\n        top:0,\n        bottom:0,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    modalText:{\n        textAlign:\"center\",\n        fontSize: 24\n    },\n    modalButton:{\n        backgroundColor:\"transparent\",\n        borderRadius:100,\n        borderColor:\"#ffffff\",\n        marginTop:64,\n        borderWidth:1,\n        paddingTop:16,\n        paddingBottom:16,\n        paddingLeft:25,\n        paddingRight:25,\n        marginHorizontal:5,\n        flex:1,\n\n    },\n    moreText: {\n        textAlign:\"center\",\n        marginTop:20,\n        fontSize: 25\n\n    },\n    helloText:{\n        fontSize:40,\n        textAlign:\"center\",\n        marginTop:0,\n\n    },\n    wrap:{\n        height: 60,\n        marginBottom: 10,\n        marginTop: 10,\n        margin:20,\n        borderRadius:8,\n        backgroundColor:\"#2D3953\",\n        shadowColor:\"#4048BF\",\n        shadowOffset:{\n            width: 8.4,\n            height: 8.4\n        },\n        shadowOpacity:0.74,\n        shadowRadius:30,\n        elevation:10,\n\n    },\n    wrap2:{\n        padding:20,\n        borderRadius:8,\n        backgroundColor:\"#2D3953\",     \n    },\n    text1:{\n        fontSize:28.8,\n        color:\"#ECE0E9\",\n        fontWeight:\"600\"\n    },\n    center:{\n        justifyContent:\"center\",\n        alignItems:\"center\",\n\n    },\n    shadowButton:{\n        borderColor:\"blue\",\n        borderWidth:1,\n        borderRadius:105,\n        width:210,\n        height:80,\n\n        shadowColor:\"#4048BF\",\n        shadowOffset:{\n            width:8.4,\n            height:8.4\n        },\n        shadowOpacity:0.5,\n        shadowRadius:30,\n        elevation:10,\n\n    },\n    mainButton:{\n        zIndex:10,\n        width:200,\n        height:70,\n        borderRadius:100,\n        shadowColor:\"#4048BF\",\n        shadowOffset:{\n            width:6.4,\n            height:6.4,\n        },\n        shadowOpacity:0.5,\n        shadowRadius:20,\n        backgroundColor:\"#2D3953\"\n    },\n    container2:{\n        flex:1,\n        backgroundColor:'white',\n    },\n    tip:{\n        position:\"relative\",\n        left:0,\n        right:0,\n        top:-445,\n        bottom:0,\n        alignItems: \"center\",\n        justifyContent: \"center\" \n    },\n    bruh:{\n        paddingBottom: 80\n    }\n})\n\nexport default Quiz"]},"metadata":{},"sourceType":"module"}